{
    "pass": false,
    "messages": [
        {
            "role": "user",
            "content": "I'm a third-year computer science student. I was absent from the last Compiler Principles course due to illness. I'd appreciate your assistance in studying the presentation `Compile.pptx`. I need to create a note (create a new file `NOTE.md`) to help me summarize the key points of the lecture. First, please summarize the definitions of functional and imperative symbol tables and their differences in insertion operations. Then, I see a lot of code in the presentation that represents the different modes of operation for each symbol table. Please help me put all of the origin code into my notes and provide explanations for each. Finally, please explain the homework assignments `HW.PDF` for this class.\n\n"
        },
        {
            "role": "assistant",
            "content": null,
            "tool_calls": [
                {
                    "id": "call_2GpnoazteCMgNB2SJfuCl6AY",
                    "type": "function",
                    "function": {
                        "name": "filesystem-list_allowed_directories",
                        "arguments": "{}"
                    }
                }
            ]
        },
        {
            "role": "tool",
            "content": "{\"type\":\"text\",\"text\":\"Allowed directories:\\n/workspace/dumps/workspace\",\"annotations\":null}",
            "tool_call_id": "call_2GpnoazteCMgNB2SJfuCl6AY"
        },
        {
            "role": "assistant",
            "content": null,
            "tool_calls": [
                {
                    "id": "call_muLMCtfy354kqBA5npAGN86P",
                    "type": "function",
                    "function": {
                        "name": "filesystem-list_directory",
                        "arguments": "{\"path\":\"/workspace/dumps/workspace\"}"
                    }
                }
            ]
        },
        {
            "role": "tool",
            "content": "{\"type\":\"text\",\"text\":\"[DIR] .pdf_tools_tempfiles\\n[FILE] Compile.pptx\\n[FILE] HW.pdf\",\"annotations\":null}",
            "tool_call_id": "call_muLMCtfy354kqBA5npAGN86P"
        },
        {
            "role": "assistant",
            "content": null,
            "tool_calls": [
                {
                    "id": "call_3e1jRjW9RylBBOUEkg74qpiw",
                    "type": "function",
                    "function": {
                        "name": "pptx-open_presentation",
                        "arguments": "{\"file_path\":\"/workspace/dumps/workspace/Compile.pptx\",\"id\":null}"
                    }
                }
            ]
        },
        {
            "role": "tool",
            "content": "{\"type\":\"text\",\"text\":\"{\\n  \\\"presentation_id\\\": \\\"presentation_1\\\",\\n  \\\"message\\\": \\\"Opened presentation from /workspace/dumps/workspace/Compile.pptx with ID: presentation_1\\\",\\n  \\\"slide_count\\\": 26\\n}\",\"annotations\":null}",
            "tool_call_id": "call_3e1jRjW9RylBBOUEkg74qpiw"
        },
        {
            "role": "assistant",
            "content": null,
            "tool_calls": [
                {
                    "id": "call_5SQI9GswZ7Id5z3WSDTJIPw8",
                    "type": "function",
                    "function": {
                        "name": "pptx-extract_presentation_text",
                        "arguments": "{\"presentation_id\":\"presentation_1\",\"include_slide_info\":true}"
                    }
                }
            ]
        },
        {
            "role": "tool",
            "content": "{\"type\":\"text\",\"text\":\"{\\n  \\\"success\\\": true,\\n  \\\"presentation_id\\\": \\\"presentation_1\\\",\\n  \\\"total_slides\\\": 26,\\n  \\\"slides_with_text\\\": 26,\\n  \\\"total_text_shapes\\\": 45,\\n  \\\"slides_with_titles\\\": 26,\\n  \\\"slides_with_tables\\\": 2,\\n  \\\"slides_text\\\": [\\n    {\\n      \\\"slide_index\\\": 0,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Semantic Analysis\\\\u000bChapter 5\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Semantic Analysis\\\\u000bChapter 5\\\",\\n            \\\"placeholder_type\\\": \\\"CENTER_TITLE (3)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Semantic Analysis\\\\u000bChapter 5\\\\nSemantic Analysis\\\\u000bChapter 5\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u5e7b\u706f\u7247\\\",\\n      \\\"total_text_shapes\\\": 1,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 1,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Semantic Analysis\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Semantic Analysis\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The semantic analysis phase of a compiler:\\\\nconnects variable definitions to their uses\\\\nchecks that each expression has a correct type\\\\ntranslates the abstract syntax into a simpler representation suitable for generating machine code\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Semantic Analysis\\\\nSemantic Analysis\\\\nThe semantic analysis phase of a compiler:\\\\nconnects variable definitions to their uses\\\\nchecks that each expression has a correct type\\\\ntranslates the abstract syntax into a simpler representation suitable for generating machine code\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 2,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Outline\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Outline\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Symbol Tables\\\\nBindings for the Tiger Compiler\\\\nType Checking\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Outline\\\\nOutline\\\\nSymbol Tables\\\\nBindings for the Tiger Compiler\\\\nType Checking\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 3,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"5.1 Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"5.1 Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The semantic analysis phase is characterized by the maintenance of symbol tables (also called environments) mapping identi\ufb01ers to their types and locations.\\\\nDeclarations of identifiers: IDs are bound to \u201cmeanings\u201d in the symbol tables\\\\nUses of identifiers: look up IDs in the symbol tables. \\\\nAn environment is a set of bindings denoted by the \u21a6 arrow.\\\\nE.g., \u03c30 = {g \u21a6 string, a \u21a6 int}\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"5.1 Symbol Tables\\\\n5.1 Symbol Tables\\\\nThe semantic analysis phase is characterized by the maintenance of symbol tables (also called environments) mapping identi\ufb01ers to their types and locations.\\\\nDeclarations of identifiers: IDs are bound to \u201cmeanings\u201d in the symbol tables\\\\nUses of identifiers: look up IDs in the symbol tables. \\\\nAn environment is a set of bindings denoted by the \u21a6 arrow.\\\\nE.g., \u03c30 = {g \u21a6 string, a \u21a6 int}\\\\n1 function f(a:int,b:int,c:int)=\\\\n2\\\\t(print_int (a+c);\\\\n3\\\\tlet var j:= a+b\\\\n4\\\\t\\\\t var a:= \u201chello\u201d\\\\n5\\\\t in print(a); print_int(j)\\\\n6\\\\tend;\\\\n7\\\\tprint_int(b)\\\\n8\\\\t)\\\\nline 1: \uf0731 = \uf0730 + {a \u21a6 int, b \u21a6 int, c \u21a6 int}\\\\nline 3: \uf0732 = \uf0731 + {j \u21a6 int}\\\\nline 4: \uf0733 = \uf0732 + {a \u21a6 string}\\\\nhow do the compiler know the type of j?\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 4,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"\uf0732 contains a \u21a6 int\\\\nWhat is the binding of a in \uf0733?\\\\nBindings in the right-hand table override those in the left.\\\\nX + Y for tables is not the same as Y + X.\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Symbol Tables\\\\nSymbol Tables\\\\n\uf0732 contains a \u21a6 int\\\\nWhat is the binding of a in \uf0733?\\\\nBindings in the right-hand table override those in the left.\\\\nX + Y for tables is not the same as Y + X.\\\\n1 function f(a:int,b:int,c:int)=\\\\n2\\\\t(print_int (a+c);\\\\n3\\\\tlet var j:= a+b\\\\n4\\\\t\\\\t var a:= \u201chello\u201d\\\\n5\\\\t in print(a); print_int(j)\\\\n6\\\\tend;\\\\n7\\\\tprint_int(b)\\\\n8\\\\t)\\\\nline 4: \uf0733 = \uf0732 + {a \u21a6 string}\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 5,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Each local variable in a program has a scope in which it is visible.\\\\nAs the semantic analysis reaches the end of each scope, the identi\ufb01er bindings local to that scope are discarded.\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Symbol Tables\\\\nSymbol Tables\\\\nEach local variable in a program has a scope in which it is visible.\\\\nAs the semantic analysis reaches the end of each scope, the identi\ufb01er bindings local to that scope are discarded.\\\\n1 function f(a:int,b:int,c:int)=\\\\n2\\\\t(print_int (a+c);\\\\n3\\\\tlet var j:= a+b\\\\n4\\\\t\\\\t var a:= \u201chello\u201d\\\\n5\\\\t in print(a); print_int(j)\\\\n6\\\\tend;\\\\n7\\\\tprint_int(b)\\\\n8\\\\t)\\\\nline 6: discard \uf0733, go back to \uf0731 (line 1)\\\\nline 8: discard \uf0731, go back to \uf0730\\\\nSymbol table: add/lookup/undo bindings\\\\nHow should symbol tables be implemented?\\\\nline 7: look up b in \uf0731\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 6,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Functional Style\\\\nKeep \uf0731 in pristine condition while creating \uf0732 and \uf0733\\\\nEasy to restore \uf0731 \\\\n\\\\nImperative Style\\\\nmodify \uf0731 until it becomes \uf0732\\\\nwhile \uf0732 exists, we cannot look things up in \uf0731\\\\nwhen we are done with \uf0732, we can undo the modification to get \uf0731 back again\\\\nHow?\\\\na single global environment \uf073 + an undo stack\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Symbol Tables\\\\nSymbol Tables\\\\nFunctional Style\\\\nKeep \uf0731 in pristine condition while creating \uf0732 and \uf0733\\\\nEasy to restore \uf0731 \\\\n\\\\nImperative Style\\\\nmodify \uf0731 until it becomes \uf0732\\\\nwhile \uf0732 exists, we cannot look things up in \uf0731\\\\nwhen we are done with \uf0732, we can undo the modification to get \uf0731 back again\\\\nHow?\\\\na single global environment \uf073 + an undo stack\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 7,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Multiple Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Multiple Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"In some languages there can be several active environments at once: Each module, or class, or record in the program has a symbol table \uf073 of its own.\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Multiple Symbol Tables\\\\nMultiple Symbol Tables\\\\nIn some languages there can be several active environments at once: Each module, or class, or record in the program has a symbol table \uf073 of its own.\\\\npackage M; \u00a0\u00a0\\\\nclass E { \u00a0\u00a0\\\\n     static int a = 5; \u00a0\u00a0\\\\n} \u00a0\\\\nclass N { \u00a0\u00a0\\\\n     static int b = 10; \u00a0\u00a0\\\\n     static int a = E.a + b; \u00a0\\\\n\u00a0} \u00a0\u00a0\\\\nclass D { \u00a0\u00a0\\\\n     static int d = E.a + N.a; \u00a0\\\\n\u00a0}\\\\n\uf0731 = { a \u21a6 int }\\\\n\uf0732 = { E \u21a6 \uf0731 }\\\\n\uf0733= {b \u21a6 int , a \u21a6 int }\\\\n\uf0734= { N \u21a6 \uf0733 }\\\\n\uf0735= { d \u21a6 int }\\\\n\uf0736= { D \u21a6 \uf0735 }\\\\n\uf0737 = \uf0732 +\uf0734+ \uf0736\\\\nJava\\\\nIn Java, forward reference is allowed. so E, N, and D are all compiled in the environment \uf0737. The result of the analysis is {M \u21a6 \uf073 7}.\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 8,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Multiple Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Multiple Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Multiple Symbol Tables\\\\nMultiple Symbol Tables\\\\nstructure M = struct \\\\n   structure E = struct \\\\n      val a = 5; \\\\n   end \\\\n   structure N = struct \\\\n      val b = 10 \\\\n      val a = E.a + b \\\\n   end \\\\n   structure D = struct \\\\n      val d = E.a + N.a \\\\n   end \\\\nend\\\\nML\\\\nN is compiled using environment \uf0730 + \uf0732. D is compiled using \uf073 0 + \uf0732 + \uf0734.  \\\\nThe result of the analysis is also {M \u21a6 \uf073 7}.\\\\n\uf0731 = { a \u21a6 int }\\\\n\uf0732 = { E \u21a6 \uf0731 }\\\\n\uf0733= {b \u21a6 int , a \u21a6 int }\\\\n\uf0734= { N \u21a6 \uf0733 }\\\\n\uf0735= { d \u21a6 int }\\\\n\uf0736= { D \u21a6 \uf0735 }\\\\n\uf0737 = \uf0732 +\uf0734+ \uf0736\\\\nEach class/structure has its own symbol table.\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 1,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 9,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Efficient Imperative Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Efficient Imperative Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Imperative Style\\\\nBecause a large program may contain thousands of distinct identi\ufb01ers, symbol tables must permit ef\ufb01cient lookup.\\\\nHow?\\\\nHash Table\\\\n\uf073\u2019 = \uf073 + {a \u21a6 int}\\\\ninsert <a, int> in the hash table\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Efficient Imperative Symbol Tables\\\\nEfficient Imperative Symbol Tables\\\\nImperative Style\\\\nBecause a large program may contain thousands of distinct identi\ufb01ers, symbol tables must permit ef\ufb01cient lookup.\\\\nHow?\\\\nHash Table\\\\n\uf073\u2019 = \uf073 + {a \u21a6 int}\\\\ninsert <a, int> in the hash table\\\\nSymbol tables need to support deletion easily.\\\\nHow?\\\\nHash Table with external chaining\\\\ne.g., hash(a) -> <a, int> -> <a, string>\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 10,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Efficient Imperative Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Efficient Imperative Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Efficient Imperative Symbol Tables\\\\nEfficient Imperative Symbol Tables\\\\nstruct bucket { string key; void *binding; struct bucket *next; };\\\\n\\\\u000b#define SIZE 109\\\\n\\\\u000bstruct bucket *table[SIZE];\\\\n\\\\u000bunsigned int hash(char *s0)\\\\n{ unsigned int h=0; char *s;\\\\n  for(s=s0; *s; s++)\\\\n    h=h*65599 + *s; \\\\n  return h; \\\\n}\\\\n\\\\u000bstruct bucket *Bucket (string key, void *binding, struct bucket *next) {\\\\n  struct bucket *b=checked_malloc(sizeof(*b));\\\\n  b->key = key; b->binding = binding; b->next = next;\\\\n  return b; \\\\n}\\\\nh = (\uf061n-1c1+\uf061n-2c2 +\u2026..+ \uf061 cn-1+ cn)\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 1,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 11,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Efficient Imperative Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Efficient Imperative Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Efficient Imperative Symbol Tables\\\\nEfficient Imperative Symbol Tables\\\\nvoid insert(string key, void *binding) {\\\\n  int index=hash(key)%SIZE;\\\\n  table[index]=Bucket(key, binding, table[index]); \\\\n}\\\\n\\\\u000bvoid *lookup(string key) {\\\\n  int index=hash(key)%SIZE \\\\n  struct bucket *b;\\\\n  for (b = table[index]; b; b=b->next) \\\\n    if (0==strcmp(b->key,key)) \\\\n      return b->binding; \\\\n  return NULL; \\\\n}\\\\n\\\\u000bvoid pop(string key) { \\\\n  int index=hash(key)%SIZE\\\\n  table[index]=table[index].next; \\\\n}\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 1,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 12,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Effective Imperative Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Effective Imperative Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Consider \uf073 + {a \u21a6 \u03c42} when \uf073 contains a \u21a6 \u03c41 already.\\\\n\\\\n The insert function leaves a \u21a6 \u03c41 in the bucket and puts a \u21a6 \u03c42 earlier in the list. \\\\nhash(a) -> <a, \u03c42 > -> <a, \u03c41>\\\\n\\\\nwhen pop(a) is done at the end of a's scope, \uf073 is restored. (insertion and pop work in a stack-like fashion.)\\\\nhash(a) -> <a, \u03c41>\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Effective Imperative Symbol Tables\\\\nEffective Imperative Symbol Tables\\\\nConsider \uf073 + {a \u21a6 \u03c42} when \uf073 contains a \u21a6 \u03c41 already.\\\\n\\\\n The insert function leaves a \u21a6 \u03c41 in the bucket and puts a \u21a6 \u03c42 earlier in the list. \\\\nhash(a) -> <a, \u03c42 > -> <a, \u03c41>\\\\n\\\\nwhen pop(a) is done at the end of a's scope, \uf073 is restored. (insertion and pop work in a stack-like fashion.)\\\\nhash(a) -> <a, \u03c41>\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 13,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Efficient Functional Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Efficient Functional Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Functional Style\\\\nWe wish to compute \uf073\u2032 = \uf073 + {a \u21a6 \u03c4} in such a way that we still have \uf073 available to look up identifiers. \\\\ndo not change \uf073\\\\n\\\\nWe create a new table by computing the \\\\\\\"sum\\\\\\\" of an existing table and a new binding.\\\\n\\\\nCan we achieve this with hash tables?\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Efficient Functional Symbol Tables\\\\nEfficient Functional Symbol Tables\\\\nFunctional Style\\\\nWe wish to compute \uf073\u2032 = \uf073 + {a \u21a6 \u03c4} in such a way that we still have \uf073 available to look up identifiers. \\\\ndo not change \uf073\\\\n\\\\nWe create a new table by computing the \\\\\\\"sum\\\\\\\" of an existing table and a new binding.\\\\n\\\\nCan we achieve this with hash tables?\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 14,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Efficient Functional Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Efficient Functional Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"m2 = m1 + {mouse \u21a6 4}\\\\nm1 = {bat \u21a6 1,camel \u21a6 2,dog \u21a6 3}, suppose index(camel) = index(mouse) = 5\\\\nHash(mouse) -> <mouse, 4>: no longer have m1\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [\\n          {\\n            \\\"shape_index\\\": 3,\\n            \\\"shape_name\\\": \\\"\u8868\u683c 27\\\",\\n            \\\"table_content\\\": [\\n              {\\n                \\\"row\\\": 0,\\n                \\\"cells\\\": [\\n                  \\\"mouse\\\",\\n                  \\\"4\\\"\\n                ]\\n              }\\n            ]\\n          }\\n        ],\\n        \\\"all_text_combined\\\": \\\"Efficient Functional Symbol Tables\\\\nEfficient Functional Symbol Tables\\\\nm2 = m1 + {mouse \u21a6 4}\\\\nm1 = {bat \u21a6 1,camel \u21a6 2,dog \u21a6 3}, suppose index(camel) = index(mouse) = 5\\\\nHash(mouse) -> <mouse, 4>: no longer have m1\\\\nmouse\\\\n4\\\\nX\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": true\\n    },\\n    {\\n      \\\"slide_index\\\": 15,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Efficient Functional Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Efficient Functional Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"m2 = m1 + {mouse \u21a6 4}\\\\nm1 = {bat \u21a6 1,camel \u21a6 2,dog \u21a6 3}, suppose index(camel) = index(mouse) = 5\\\\nHash(mouse) -> <mouse, 4>: no longer have m1\\\\nCopy the array, but share all the old buckets: not efficient\\\\nThe array in a hash table should be quite large\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Efficient Functional Symbol Tables\\\\nEfficient Functional Symbol Tables\\\\nm2 = m1 + {mouse \u21a6 4}\\\\nm1 = {bat \u21a6 1,camel \u21a6 2,dog \u21a6 3}, suppose index(camel) = index(mouse) = 5\\\\nHash(mouse) -> <mouse, 4>: no longer have m1\\\\nCopy the array, but share all the old buckets: not efficient\\\\nThe array in a hash table should be quite large\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 16,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Efficient Functional Symbol Table\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Efficient Functional Symbol Table\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"We can perform such \u201cfunctional\u201d additions to search trees ef\ufb01ciently by using binary search trees.\\\\nIf we add a new node at depth d of the tree, we must create d new nodes \u2013 but we don\u2019t need to copy the whole tree.\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [\\n          {\\n            \\\"shape_index\\\": 3,\\n            \\\"shape_name\\\": \\\"\u8868\u683c 27\\\",\\n            \\\"table_content\\\": [\\n              {\\n                \\\"row\\\": 0,\\n                \\\"cells\\\": [\\n                  \\\"dog\\\",\\n                  \\\"3\\\"\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            \\\"shape_index\\\": 5,\\n            \\\"shape_name\\\": \\\"\u8868\u683c 27\\\",\\n            \\\"table_content\\\": [\\n              {\\n                \\\"row\\\": 0,\\n                \\\"cells\\\": [\\n                  \\\"bat\\\",\\n                  \\\"1\\\"\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            \\\"shape_index\\\": 6,\\n            \\\"shape_name\\\": \\\"\u8868\u683c 27\\\",\\n            \\\"table_content\\\": [\\n              {\\n                \\\"row\\\": 0,\\n                \\\"cells\\\": [\\n                  \\\"camel\\\",\\n                  \\\"2\\\"\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            \\\"shape_index\\\": 9,\\n            \\\"shape_name\\\": \\\"\u8868\u683c 27\\\",\\n            \\\"table_content\\\": [\\n              {\\n                \\\"row\\\": 0,\\n                \\\"cells\\\": [\\n                  \\\"mouse\\\",\\n                  \\\"4\\\"\\n                ]\\n              }\\n            ]\\n          },\\n          {\\n            \\\"shape_index\\\": 11,\\n            \\\"shape_name\\\": \\\"\u8868\u683c 27\\\",\\n            \\\"table_content\\\": [\\n              {\\n                \\\"row\\\": 0,\\n                \\\"cells\\\": [\\n                  \\\"dog\\\",\\n                  \\\"3\\\"\\n                ]\\n              }\\n            ]\\n          }\\n        ],\\n        \\\"all_text_combined\\\": \\\"Efficient Functional Symbol Table\\\\nEfficient Functional Symbol Table\\\\nWe can perform such \u201cfunctional\u201d additions to search trees ef\ufb01ciently by using binary search trees.\\\\nIf we add a new node at depth d of the tree, we must create d new nodes \u2013 but we don\u2019t need to copy the whole tree.\\\\nCopy the nodes from the root to the parent of the inserted node.\\\\n\\\\nm1 keeps unchanged.\\\\n\\\\nLooking up an element: log(n) for a balanced tree of n nodes.\\\\ndog\\\\n3\\\\nbat\\\\n1\\\\ncamel\\\\n2\\\\nmouse\\\\n4\\\\nm1\\\\ndog\\\\n3\\\\nm2\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": true\\n    },\\n    {\\n      \\\"slide_index\\\": 17,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Symbols in The Tiger Compiler\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Symbols in The Tiger Compiler\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Symbols in The Tiger Compiler\\\\nSymbols in The Tiger Compiler\\\\nstruct bucket { string key; void *binding; struct bucket *next; };\\\\n\\\\u000b#define SIZE 109\\\\n\\\\u000bstruct bucket *table[SIZE];\\\\n\\\\u000bunsigned int hash(char *s0)\\\\n{ unsigned int h=0; char *s;\\\\n  for(s=s0; *s; s++)\\\\n    h=h*65599 + *s; \\\\n  return h; \\\\n}\\\\n\\\\n\\\\u000bstruct bucket *Bucket (string key, void *binding, struct bucket *next) {\\\\n  struct bucket *b=checked_malloc(sizeof(*b));\\\\n  b->key = key; b->binding = binding; b->next = next;\\\\n  return b; }\\\\nh = (\uf061n-1c1+\uf061n-2c2 +\u2026..+ \uf061 cn-1+ cn)\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 1,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 18,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Symbols in The Tiger Compiler\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Symbols in The Tiger Compiler\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Symbols in The Tiger Compiler\\\\nSymbols in The Tiger Compiler\\\\nvoid insert(string key, void *binding) {\\\\n  int index=hash(key)%SIZE;\\\\n  table[index]=Bucket(key, binding, table[index]); \\\\n}\\\\n\\\\u000bvoid *lookup(string key) {\\\\n  int index=hash(key)%SIZE \\\\n  struct bucket *b;\\\\n  for (b = table[index]; b; b=b->next) \\\\n    if (0==strcmp(b->key,key)) \\\\n      return b->binding; \\\\n  return NULL; \\\\n}\\\\n\\\\u000bvoid pop(string key) { \\\\n  int index=hash(key)%SIZE\\\\n  table[index]=table[index].next; \\\\n}\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 1,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 19,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Symbols in The Tiger Compiler\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Symbols in The Tiger Compiler\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"In Program 5.2: \\\\nmust examine every character of the string s for the hash operation\\\\neach time it compares s against a string in the ith bucket\\\\nHow to improve?\\\\nConvert each string to a symbol\\\\nThe Symbol module has these important properties:\\\\nExtracting an integer hash-key is very fast: use the Symbol-pointer itself as the integer hash-key. (for hash tables)\\\\nComparing symbols for equality is fast (just pointer or integer comparison).\\\\nComparing two symbols for \u201cgreater-than\u201d (in some arbitrary ordering) is very fast  (for binary search trees)\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Symbols in The Tiger Compiler\\\\nSymbols in The Tiger Compiler\\\\nIn Program 5.2: \\\\nmust examine every character of the string s for the hash operation\\\\neach time it compares s against a string in the ith bucket\\\\nHow to improve?\\\\nConvert each string to a symbol\\\\nThe Symbol module has these important properties:\\\\nExtracting an integer hash-key is very fast: use the Symbol-pointer itself as the integer hash-key. (for hash tables)\\\\nComparing symbols for equality is fast (just pointer or integer comparison).\\\\nComparing two symbols for \u201cgreater-than\u201d (in some arbitrary ordering) is very fast  (for binary search trees)\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 20,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"Symbols in The Tiger Compiler\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"Symbols in The Tiger Compiler\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The interface of symbols and symbol tables\\\\nvoid *: We want different notions of binding for different purposes in the compiler \u2013 type bindings for types, value bindings for variables and functions\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"Symbols in The Tiger Compiler\\\\nSymbols in The Tiger Compiler\\\\nThe interface of symbols and symbol tables\\\\nvoid *: We want different notions of binding for different purposes in the compiler \u2013 type bindings for types, value bindings for variables and functions\\\\ntypedef struct S_symbol_ *S_symbol;\\\\nS_symbol S_symbol (string);\\\\nstring S_name(S_symbol);\\\\n\\\\u000btypedef struct TAB_table_ *S_table;\\\\nS_table S_empty( void);\\\\nvoid S_enter( S_table t,S_symbol sym, void *value); \\\\nvoid *S_look( S_table t, S_symbol sym);\\\\nvoid S_beginScope( S_table t); \\\\nvoid S_endScope( S_table t);\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 21,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"The Implementation of Symbols\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The Implementation of Symbols\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"The Implementation of Symbols\\\\nThe Implementation of Symbols\\\\nstatic S_symbol mksymbol (string name , S_symbol next) {\\\\n  S_symbol s = checked_malloc(sizeof(*s));\\\\n  s->name = name; s->next = next;\\\\n  return s;\\\\n}\\\\n\\\\u000bS_symbol S_symbol (string name) {\\\\n\\\\tint index = hash(name)%SIZE;\\\\n\\\\tS_symbol syms = hashtable[index], sym;\\\\n\\\\tfor ( sym = syms; sym; sym = sym->next)\\\\n\\\\t  if (0 == strcmp(sym->name, name)) return sym;\\\\n\\\\tsym = mksymbol(name,syms);\\\\n\\\\thashtable[index] = sym;\\\\n   return sym;\\\\n}\\\\n\\\\u000bstring S_name (S_symbol sym) {\\\\n  return sym->name;\\\\n}\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 1,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 22,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"The Implementation of Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The Implementation of Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The Tiger compiler in C uses destructive-update environments.\\\\nAn imperative table is implemented using a hash table.\\\\nTAB: a generic hash table module\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"The Implementation of Symbol Tables\\\\nThe Implementation of Symbol Tables\\\\nThe Tiger compiler in C uses destructive-update environments.\\\\nAn imperative table is implemented using a hash table.\\\\nTAB: a generic hash table module\\\\n// make a new S_Table\\\\nS_table S_empty(void) {\\\\n  return TAB_empty(); \\\\n}\\\\n// insert a binding\\\\nvoid S_enter(S_table t, S_symbol sym, void *value){ \\\\n  TAB_enter(t,sym,value);\\\\n} \\\\n// look up a symbol\\\\nvoid *S_look(S_table t, S_symbol sym) { \\\\n  return TAB_look(t,sym); \\\\n}\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 23,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"The Implementation of Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The Implementation of Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"For destructive-update environments:\\\\nS_beginScope: Remembers the current state of the table\\\\nS_endScope: Restores the table to where it was at the most recent beginScope that has not already been ended.\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"The Implementation of Symbol Tables\\\\nThe Implementation of Symbol Tables\\\\nFor destructive-update environments:\\\\nS_beginScope: Remembers the current state of the table\\\\nS_endScope: Restores the table to where it was at the most recent beginScope that has not already been ended.\\\\nstatic struct S_symbol_ marksym = { \u201c<mark>\u201d, 0 };\\\\n\\\\u000bvoid S_beginScope ( S_table t) { \\\\n  S_enter(t, &marksym, NULL); \\\\n}\\\\n\\\\u000bvoid S_endScope( S_table t) {\\\\n  S_symbol s;\\\\n  do \\\\n    s= TAB_pop(t); \\\\n  while (s != &marksym);\\\\n}\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 24,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"The Implementation of Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The Implementation of Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"How can we exactly pop those bindings after enterScope?\\\\n\\\\nAuxiliary stack:\\\\nShowing in what order the symbols  were \u201cpushed\u201d into the symbol table. \\\\nAs each symbol in this stack is popped, the head binding in its bucket is removed.\\\\nbeginScope: pushes a special marker onto the stack\\\\nendScope: pops symbols off the stack until finds the topmost marker.\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"The Implementation of Symbol Tables\\\\nThe Implementation of Symbol Tables\\\\nHow can we exactly pop those bindings after enterScope?\\\\n\\\\nAuxiliary stack:\\\\nShowing in what order the symbols  were \u201cpushed\u201d into the symbol table. \\\\nAs each symbol in this stack is popped, the head binding in its bucket is removed.\\\\nbeginScope: pushes a special marker onto the stack\\\\nendScope: pops symbols off the stack until finds the topmost marker.\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    },\\n    {\\n      \\\"slide_index\\\": 25,\\n      \\\"text_content\\\": {\\n        \\\"slide_title\\\": \\\"The Implementation of Symbol Tables\\\",\\n        \\\"placeholders\\\": [\\n          {\\n            \\\"shape_index\\\": 0,\\n            \\\"shape_name\\\": \\\"\u6807\u9898 1\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The Implementation of Symbol Tables\\\",\\n            \\\"placeholder_type\\\": \\\"TITLE (1)\\\",\\n            \\\"placeholder_idx\\\": 0\\n          },\\n          {\\n            \\\"shape_index\\\": 1,\\n            \\\"shape_name\\\": \\\"\u5185\u5bb9\u5360\u4f4d\u7b26 2\\\",\\n            \\\"shape_type\\\": \\\"PLACEHOLDER (14)\\\",\\n            \\\"text\\\": \\\"The auxiliary stack can be integrated into the Binder by having a global variable top showing the most recent Symbol bound in the table. \\\\nPushing: copy top into the prevtop field of the Binder.\\\",\\n            \\\"placeholder_type\\\": \\\"OBJECT (7)\\\",\\n            \\\"placeholder_idx\\\": 1\\n          }\\n        ],\\n        \\\"text_shapes\\\": [],\\n        \\\"table_text\\\": [],\\n        \\\"all_text_combined\\\": \\\"The Implementation of Symbol Tables\\\\nThe Implementation of Symbol Tables\\\\nThe auxiliary stack can be integrated into the Binder by having a global variable top showing the most recent Symbol bound in the table. \\\\nPushing: copy top into the prevtop field of the Binder.\\\\nstruct TAB_table_ {\\\\n  binder table[TABSIZE];\\\\n  void *top;\\\\n};\\\\n\\\\nt->table[index] = Binder(key, value,t->table[index], t->top);\\\\u000b\\\\nstatic binder Binder(void *key, void *value, binder next, void *prevtop) {\\\\n  binder b = checked_malloc(sizeof(*b));\\\\n  b->key = key; b->value=value; b->next=next; \\\\n  b->prevtop = prevtop;\\\\n  return b;\\\\n}\\\"\\n      },\\n      \\\"layout_name\\\": \\\"\u6807\u9898\u548c\u5185\u5bb9\\\",\\n      \\\"total_text_shapes\\\": 2,\\n      \\\"has_title\\\": true,\\n      \\\"has_tables\\\": false\\n    }\\n  ],\\n  \\\"all_presentation_text_combined\\\": \\\"=== SLIDE 1 ===\\\\nSemantic Analysis\\\\u000bChapter 5\\\\nSemantic Analysis\\\\u000bChapter 5\\\\n\\\\n=== SLIDE 2 ===\\\\nSemantic Analysis\\\\nSemantic Analysis\\\\nThe semantic analysis phase of a compiler:\\\\nconnects variable definitions to their uses\\\\nchecks that each expression has a correct type\\\\ntranslates the abstract syntax into a simpler representation suitable for generating machine code\\\\n\\\\n=== SLIDE 3 ===\\\\nOutline\\\\nOutline\\\\nSymbol Tables\\\\nBindings for the Tiger Compiler\\\\nType Checking\\\\n\\\\n=== SLIDE 4 ===\\\\n5.1 Symbol Tables\\\\n5.1 Symbol Tables\\\\nThe semantic analysis phase is characterized by the maintenance of symbol tables (also called environments) mapping identi\ufb01ers to their types and locations.\\\\nDeclarations of identifiers: IDs are bound to \u201cmeanings\u201d in the symbol tables\\\\nUses of identifiers: look up IDs in the symbol tables. \\\\nAn environment is a set of bindings denoted by the \u21a6 arrow.\\\\nE.g., \u03c30 = {g \u21a6 string, a \u21a6 int}\\\\n1 function f(a:int,b:int,c:int)=\\\\n2\\\\t(print_int (a+c);\\\\n3\\\\tlet var j:= a+b\\\\n4\\\\t\\\\t var a:= \u201chello\u201d\\\\n5\\\\t in print(a); print_int(j)\\\\n6\\\\tend;\\\\n7\\\\tprint_int(b)\\\\n8\\\\t)\\\\nline 1: \uf0731 = \uf0730 + {a \u21a6 int, b \u21a6 int, c \u21a6 int}\\\\nline 3: \uf0732 = \uf0731 + {j \u21a6 int}\\\\nline 4: \uf0733 = \uf0732 + {a \u21a6 string}\\\\nhow do the compiler know the type of j?\\\\n\\\\n=== SLIDE 5 ===\\\\nSymbol Tables\\\\nSymbol Tables\\\\n\uf0732 contains a \u21a6 int\\\\nWhat is the binding of a in \uf0733?\\\\nBindings in the right-hand table override those in the left.\\\\nX + Y for tables is not the same as Y + X.\\\\n1 function f(a:int,b:int,c:int)=\\\\n2\\\\t(print_int (a+c);\\\\n3\\\\tlet var j:= a+b\\\\n4\\\\t\\\\t var a:= \u201chello\u201d\\\\n5\\\\t in print(a); print_int(j)\\\\n6\\\\tend;\\\\n7\\\\tprint_int(b)\\\\n8\\\\t)\\\\nline 4: \uf0733 = \uf0732 + {a \u21a6 string}\\\\n\\\\n=== SLIDE 6 ===\\\\nSymbol Tables\\\\nSymbol Tables\\\\nEach local variable in a program has a scope in which it is visible.\\\\nAs the semantic analysis reaches the end of each scope, the identi\ufb01er bindings local to that scope are discarded.\\\\n1 function f(a:int,b:int,c:int)=\\\\n2\\\\t(print_int (a+c);\\\\n3\\\\tlet var j:= a+b\\\\n4\\\\t\\\\t var a:= \u201chello\u201d\\\\n5\\\\t in print(a); print_int(j)\\\\n6\\\\tend;\\\\n7\\\\tprint_int(b)\\\\n8\\\\t)\\\\nline 6: discard \uf0733, go back to \uf0731 (line 1)\\\\nline 8: discard \uf0731, go back to \uf0730\\\\nSymbol table: add/lookup/undo bindings\\\\nHow should symbol tables be implemented?\\\\nline 7: look up b in \uf0731\\\\n\\\\n=== SLIDE 7 ===\\\\nSymbol Tables\\\\nSymbol Tables\\\\nFunctional Style\\\\nKeep \uf0731 in pristine condition while creating \uf0732 and \uf0733\\\\nEasy to restore \uf0731 \\\\n\\\\nImperative Style\\\\nmodify \uf0731 until it becomes \uf0732\\\\nwhile \uf0732 exists, we cannot look things up in \uf0731\\\\nwhen we are done with \uf0732, we can undo the modification to get \uf0731 back again\\\\nHow?\\\\na single global environment \uf073 + an undo stack\\\\n\\\\n=== SLIDE 8 ===\\\\nMultiple Symbol Tables\\\\nMultiple Symbol Tables\\\\nIn some languages there can be several active environments at once: Each module, or class, or record in the program has a symbol table \uf073 of its own.\\\\npackage M; \u00a0\u00a0\\\\nclass E { \u00a0\u00a0\\\\n     static int a = 5; \u00a0\u00a0\\\\n} \u00a0\\\\nclass N { \u00a0\u00a0\\\\n     static int b = 10; \u00a0\u00a0\\\\n     static int a = E.a + b; \u00a0\\\\n\u00a0} \u00a0\u00a0\\\\nclass D { \u00a0\u00a0\\\\n     static int d = E.a + N.a; \u00a0\\\\n\u00a0}\\\\n\uf0731 = { a \u21a6 int }\\\\n\uf0732 = { E \u21a6 \uf0731 }\\\\n\uf0733= {b \u21a6 int , a \u21a6 int }\\\\n\uf0734= { N \u21a6 \uf0733 }\\\\n\uf0735= { d \u21a6 int }\\\\n\uf0736= { D \u21a6 \uf0735 }\\\\n\uf0737 = \uf0732 +\uf0734+ \uf0736\\\\nJava\\\\nIn Java, forward reference is allowed. so E, N, and D are all compiled in the environment \uf0737. The result of the analysis is {M \u21a6 \uf073 7}.\\\\n\\\\n=== SLIDE 9 ===\\\\nMultiple Symbol Tables\\\\nMultiple Symbol Tables\\\\nstructure M = struct \\\\n   structure E = struct \\\\n      val a = 5; \\\\n   end \\\\n   structure N = struct \\\\n      val b = 10 \\\\n      val a = E.a + b \\\\n   end \\\\n   structure D = struct \\\\n      val d = E.a + N.a \\\\n   end \\\\nend\\\\nML\\\\nN is compiled using environment \uf0730 + \uf0732. D is compiled using \uf073 0 + \uf0732 + \uf0734.  \\\\nThe result of the analysis is also {M \u21a6 \uf073 7}.\\\\n\uf0731 = { a \u21a6 int }\\\\n\uf0732 = { E \u21a6 \uf0731 }\\\\n\uf0733= {b \u21a6 int , a \u21a6 int }\\\\n\uf0734= { N \u21a6 \uf0733 }\\\\n\uf0735= { d \u21a6 int }\\\\n\uf0736= { D \u21a6 \uf0735 }\\\\n\uf0737 = \uf0732 +\uf0734+ \uf0736\\\\nEach class/structure has its own symbol table.\\\\n\\\\n=== SLIDE 10 ===\\\\nEfficient Imperative Symbol Tables\\\\nEfficient Imperative Symbol Tables\\\\nImperative Style\\\\nBecause a large program may contain thousands of distinct identi\ufb01ers, symbol tables must permit ef\ufb01cient lookup.\\\\nHow?\\\\nHash Table\\\\n\uf073\u2019 = \uf073 + {a \u21a6 int}\\\\ninsert <a, int> in the hash table\\\\nSymbol tables need to support deletion easily.\\\\nHow?\\\\nHash Table with external chaining\\\\ne.g., hash(a) -> <a, int> -> <a, string>\\\\n\\\\n=== SLIDE 11 ===\\\\nEfficient Imperative Symbol Tables\\\\nEfficient Imperative Symbol Tables\\\\nstruct bucket { string key; void *binding; struct bucket *next; };\\\\n\\\\u000b#define SIZE 109\\\\n\\\\u000bstruct bucket *table[SIZE];\\\\n\\\\u000bunsigned int hash(char *s0)\\\\n{ unsigned int h=0; char *s;\\\\n  for(s=s0; *s; s++)\\\\n    h=h*65599 + *s; \\\\n  return h; \\\\n}\\\\n\\\\u000bstruct bucket *Bucket (string key, void *binding, struct bucket *next) {\\\\n  struct bucket *b=checked_malloc(sizeof(*b));\\\\n  b->key = key; b->binding = binding; b->next = next;\\\\n  return b; \\\\n}\\\\nh = (\uf061n-1c1+\uf061n-2c2 +\u2026..+ \uf061 cn-1+ cn)\\\\n\\\\n=== SLIDE 12 ===\\\\nEfficient Imperative Symbol Tables\\\\nEfficient Imperative Symbol Tables\\\\nvoid insert(string key, void *binding) {\\\\n  int index=hash(key)%SIZE;\\\\n  table[index]=Bucket(key, binding, table[index]); \\\\n}\\\\n\\\\u000bvoid *lookup(string key) {\\\\n  int index=hash(key)%SIZE \\\\n  struct bucket *b;\\\\n  for (b = table[index]; b; b=b->next) \\\\n    if (0==strcmp(b->key,key)) \\\\n      return b->binding; \\\\n  return NULL; \\\\n}\\\\n\\\\u000bvoid pop(string key) { \\\\n  int index=hash(key)%SIZE\\\\n  table[index]=table[index].next; \\\\n}\\\\n\\\\n=== SLIDE 13 ===\\\\nEffective Imperative Symbol Tables\\\\nEffective Imperative Symbol Tables\\\\nConsider \uf073 + {a \u21a6 \u03c42} when \uf073 contains a \u21a6 \u03c41 already.\\\\n\\\\n The insert function leaves a \u21a6 \u03c41 in the bucket and puts a \u21a6 \u03c42 earlier in the list. \\\\nhash(a) -> <a, \u03c42 > -> <a, \u03c41>\\\\n\\\\nwhen pop(a) is done at the end of a's scope, \uf073 is restored. (insertion and pop work in a stack-like fashion.)\\\\nhash(a) -> <a, \u03c41>\\\\n\\\\n=== SLIDE 14 ===\\\\nEfficient Functional Symbol Tables\\\\nEfficient Functional Symbol Tables\\\\nFunctional Style\\\\nWe wish to compute \uf073\u2032 = \uf073 + {a \u21a6 \u03c4} in such a way that we still have \uf073 available to look up identifiers. \\\\ndo not change \uf073\\\\n\\\\nWe create a new table by computing the \\\\\\\"sum\\\\\\\" of an existing table and a new binding.\\\\n\\\\nCan we achieve this with hash tables?\\\\n\\\\n=== SLIDE 15 ===\\\\nEfficient Functional Symbol Tables\\\\nEfficient Functional Symbol Tables\\\\nm2 = m1 + {mouse \u21a6 4}\\\\nm1 = {bat \u21a6 1,camel \u21a6 2,dog \u21a6 3}, suppose index(camel) = index(mouse) = 5\\\\nHash(mouse) -> <mouse, 4>: no longer have m1\\\\nmouse\\\\n4\\\\nX\\\\n\\\\n=== SLIDE 16 ===\\\\nEfficient Functional Symbol Tables\\\\nEfficient Functional Symbol Tables\\\\nm2 = m1 + {mouse \u21a6 4}\\\\nm1 = {bat \u21a6 1,camel \u21a6 2,dog \u21a6 3}, suppose index(camel) = index(mouse) = 5\\\\nHash(mouse) -> <mouse, 4>: no longer have m1\\\\nCopy the array, but share all the old buckets: not efficient\\\\nThe array in a hash table should be quite large\\\\n\\\\n=== SLIDE 17 ===\\\\nEfficient Functional Symbol Table\\\\nEfficient Functional Symbol Table\\\\nWe can perform such \u201cfunctional\u201d additions to search trees ef\ufb01ciently by using binary search trees.\\\\nIf we add a new node at depth d of the tree, we must create d new nodes \u2013 but we don\u2019t need to copy the whole tree.\\\\nCopy the nodes from the root to the parent of the inserted node.\\\\n\\\\nm1 keeps unchanged.\\\\n\\\\nLooking up an element: log(n) for a balanced tree of n nodes.\\\\ndog\\\\n3\\\\nbat\\\\n1\\\\ncamel\\\\n2\\\\nmouse\\\\n4\\\\nm1\\\\ndog\\\\n3\\\\nm2\\\\n\\\\n=== SLIDE 18 ===\\\\nSymbols in The Tiger Compiler\\\\nSymbols in The Tiger Compiler\\\\nstruct bucket { string key; void *binding; struct bucket *next; };\\\\n\\\\u000b#define SIZE 109\\\\n\\\\u000bstruct bucket *table[SIZE];\\\\n\\\\u000bunsigned int hash(char *s0)\\\\n{ unsigned int h=0; char *s;\\\\n  for(s=s0; *s; s++)\\\\n    h=h*65599 + *s; \\\\n  return h; \\\\n}\\\\n\\\\n\\\\u000bstruct bucket *Bucket (string key, void *binding, struct bucket *next) {\\\\n  struct bucket *b=checked_malloc(sizeof(*b));\\\\n  b->key = key; b->binding = binding; b->next = next;\\\\n  return b; }\\\\nh = (\uf061n-1c1+\uf061n-2c2 +\u2026..+ \uf061 cn-1+ cn)\\\\n\\\\n=== SLIDE 19 ===\\\\nSymbols in The Tiger Compiler\\\\nSymbols in The Tiger Compiler\\\\nvoid insert(string key, void *binding) {\\\\n  int index=hash(key)%SIZE;\\\\n  table[index]=Bucket(key, binding, table[index]); \\\\n}\\\\n\\\\u000bvoid *lookup(string key) {\\\\n  int index=hash(key)%SIZE \\\\n  struct bucket *b;\\\\n  for (b = table[index]; b; b=b->next) \\\\n    if (0==strcmp(b->key,key)) \\\\n      return b->binding; \\\\n  return NULL; \\\\n}\\\\n\\\\u000bvoid pop(string key) { \\\\n  int index=hash(key)%SIZE\\\\n  table[index]=table[index].next; \\\\n}\\\\n\\\\n=== SLIDE 20 ===\\\\nSymbols in The Tiger Compiler\\\\nSymbols in The Tiger Compiler\\\\nIn Program 5.2: \\\\nmust examine every character of the string s for the hash operation\\\\neach time it compares s against a string in the ith bucket\\\\nHow to improve?\\\\nConvert each string to a symbol\\\\nThe Symbol module has these important properties:\\\\nExtracting an integer hash-key is very fast: use the Symbol-pointer itself as the integer hash-key. (for hash tables)\\\\nComparing symbols for equality is fast (just pointer or integer comparison).\\\\nComparing two symbols for \u201cgreater-than\u201d (in some arbitrary ordering) is very fast  (for binary search trees)\\\\n\\\\n=== SLIDE 21 ===\\\\nSymbols in The Tiger Compiler\\\\nSymbols in The Tiger Compiler\\\\nThe interface of symbols and symbol tables\\\\nvoid *: We want different notions of binding for different purposes in the compiler \u2013 type bindings for types, value bindings for variables and functions\\\\ntypedef struct S_symbol_ *S_symbol;\\\\nS_symbol S_symbol (string);\\\\nstring S_name(S_symbol);\\\\n\\\\u000btypedef struct TAB_table_ *S_table;\\\\nS_table S_empty( void);\\\\nvoid S_enter( S_table t,S_symbol sym, void *value); \\\\nvoid *S_look( S_table t, S_symbol sym);\\\\nvoid S_beginScope( S_table t); \\\\nvoid S_endScope( S_table t);\\\\n\\\\n=== SLIDE 22 ===\\\\nThe Implementation of Symbols\\\\nThe Implementation of Symbols\\\\nstatic S_symbol mksymbol (string name , S_symbol next) {\\\\n  S_symbol s = checked_malloc(sizeof(*s));\\\\n  s->name = name; s->next = next;\\\\n  return s;\\\\n}\\\\n\\\\u000bS_symbol S_symbol (string name) {\\\\n\\\\tint index = hash(name)%SIZE;\\\\n\\\\tS_symbol syms = hashtable[index], sym;\\\\n\\\\tfor ( sym = syms; sym; sym = sym->next)\\\\n\\\\t  if (0 == strcmp(sym->name, name)) return sym;\\\\n\\\\tsym = mksymbol(name,syms);\\\\n\\\\thashtable[index] = sym;\\\\n   return sym;\\\\n}\\\\n\\\\u000bstring S_name (S_symbol sym) {\\\\n  return sym->name;\\\\n}\\\\n\\\\n=== SLIDE 23 ===\\\\nThe Implementation of Symbol Tables\\\\nThe Implementation of Symbol Tables\\\\nThe Tiger compiler in C uses destructive-update environments.\\\\nAn imperative table is implemented using a hash table.\\\\nTAB: a generic hash table module\\\\n// make a new S_Table\\\\nS_table S_empty(void) {\\\\n  return TAB_empty(); \\\\n}\\\\n// insert a binding\\\\nvoid S_enter(S_table t, S_symbol sym, void *value){ \\\\n  TAB_enter(t,sym,value);\\\\n} \\\\n// look up a symbol\\\\nvoid *S_look(S_table t, S_symbol sym) { \\\\n  return TAB_look(t,sym); \\\\n}\\\\n\\\\n=== SLIDE 24 ===\\\\nThe Implementation of Symbol Tables\\\\nThe Implementation of Symbol Tables\\\\nFor destructive-update environments:\\\\nS_beginScope: Remembers the current state of the table\\\\nS_endScope: Restores the table to where it was at the most recent beginScope that has not already been ended.\\\\nstatic struct S_symbol_ marksym = { \u201c<mark>\u201d, 0 };\\\\n\\\\u000bvoid S_beginScope ( S_table t) { \\\\n  S_enter(t, &marksym, NULL); \\\\n}\\\\n\\\\u000bvoid S_endScope( S_table t) {\\\\n  S_symbol s;\\\\n  do \\\\n    s= TAB_pop(t); \\\\n  while (s != &marksym);\\\\n}\\\\n\\\\n=== SLIDE 25 ===\\\\nThe Implementation of Symbol Tables\\\\nThe Implementation of Symbol Tables\\\\nHow can we exactly pop those bindings after enterScope?\\\\n\\\\nAuxiliary stack:\\\\nShowing in what order the symbols  were \u201cpushed\u201d into the symbol table. \\\\nAs each symbol in this stack is popped, the head binding in its bucket is removed.\\\\nbeginScope: pushes a special marker onto the stack\\\\nendScope: pops symbols off the stack until finds the topmost marker.\\\\n\\\\n=== SLIDE 26 ===\\\\nThe Implementation of Symbol Tables\\\\nThe Implementation of Symbol Tables\\\\nThe auxiliary stack can be integrated into the Binder by having a global variable top showing the most recent Symbol bound in the table. \\\\nPushing: copy top into the prevtop field of the Binder.\\\\nstruct TAB_table_ {\\\\n  binder table[TABSIZE];\\\\n  void *top;\\\\n};\\\\n\\\\nt->table[index] = Binder(key, value,t->table[index], t->top);\\\\u000b\\\\nstatic binder Binder(void *key, void *value, binder next, void *prevtop) {\\\\n  binder b = checked_malloc(sizeof(*b));\\\\n  b->key = key; b->value=value; b->next=next; \\\\n  b->prevtop = prevtop;\\\\n  return b;\\\\n}\\\\n\\\"\\n}\",\"annotations\":null}",
            "tool_call_id": "call_5SQI9GswZ7Id5z3WSDTJIPw8"
        },
        {
            "role": "assistant",
            "content": null,
            "tool_calls": [
                {
                    "id": "call_827THNTng2NogYmZWwZbKb2B",
                    "type": "function",
                    "function": {
                        "name": "pdf-tools-get_pdf_info",
                        "arguments": "{\"pdf_file_path\":\"/workspace/dumps/workspace/HW.pdf\"}"
                    }
                }
            ]
        },
        {
            "role": "tool",
            "content": "{\"type\":\"text\",\"text\":\"PDF file information:\\nTotal pages: 2\\nTitle: \\nAuthor: \\nCreator: Typora\\nCreation date: 20250707010226\\n\",\"annotations\":null}",
            "tool_call_id": "call_827THNTng2NogYmZWwZbKb2B"
        },
        {
            "role": "assistant",
            "content": null,
            "tool_calls": [
                {
                    "id": "call_eWR92tyk9KdqmNkuURD1KBG0",
                    "type": "function",
                    "function": {
                        "name": "pdf-tools-read_pdf_pages",
                        "arguments": "{\"pdf_file_path\":\"/workspace/dumps/workspace/HW.pdf\",\"start_page\":1,\"end_page\":2}"
                    }
                }
            ]
        },
        {
            "role": "tool",
            "content": "{\"type\":\"text\",\"text\":\"PDF total pages: 2\\nExtracted page range: 1-2\\n\\n=== Page 1 ===\\nCompiler Principles Assignment: Semantic Analysis & Symbol Tables  \\n\u00a0\\nInstructions:  Based on Chapter 5 of the \\\"Modern Compiler Implementation\\\" presentation, please answer the  \\nfollowing questions. All questions are multiple-choice or fill-in-the-blank with a single correct answer.\\nQuestion 1 (Multiple Choice)\\nDuring the semantic analysis phase, the Symbol Table is crucial. When the compiler exits a scope (e.g., after a  \\nfunction body or a let block), it must restore the symbol table to its state before entering that scope. Which  \\nof the following implementation methods accomplishes this \\\"restore\\\" operation where the primary overhead  \\ninvolves manipulating a few pointers, rather than performing a large-scale copy of the entire data structure?\\nA) Making a complete, deep copy of the hash-table-based symbol table upon entering the scope.\\nB) Using a functional-style balanced binary search tree, which only creates new nodes along the path from the  \\nroot to the insertion point when adding a new binding.\\nC) Using an imperative-style hash table combined with a separate \\\"undo stack\\\" to log all modifications, which  \\nare then reversed upon exiting the scope.\\nD) Both B and C are correct.\\nQuestion 2 (Fill in the Blank)\\nIn the Tiger pseudocode below, assume the initial symbol table is \u03c30 = {g \u21a6  string, a \u21a6  int}. What is the  \\ntype bound to the variable a when the print(a) statement on line 8 is executed?\\nAnswer:  ____\\nQuestion 3 (Multiple Choice)\\nWhen implementing an imperative-style symbol table using a hash table with external chaining to resolve  \\ncollisions, what is the most efficient and scope-compliant way to handle the insertion of a new binding a \u21a6 \\n\u03c42 when an older binding a \u21a6 \u03c41 for the same identifier a already exists within the table?1 function f(a:int, b:int, c:int) =\\n2 (\\n3 \u00a0 print_int(a+c);\\n4 \u00a0 let \\n5 \u00a0 \u00a0 var j := a+b\\n6 \u00a0 \u00a0 var a := \\\"hello\\\"\\n7 \u00a0 in \\n8 \u00a0 \u00a0 print(a); \\n9 \u00a0 \u00a0 print_int(j)\\n10  end;\\n11  print_int(b)\\n12 )1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n\\n\\n=== Page 2 ===\\nA) Traverse the collision chain to find and overwrite the old binding a \u21a6  \u03c4 1.\\nB) Append the new binding a \u21a6  \u03c4 2 to the end of the collision chain.\\nC) Insert the new binding a \u21a6  \u03c4 2 at the head of the collision chain, effectively shadowing the old binding.\\nD) Throw a \\\"variable redefined\\\" compilation error.\\nQuestion 4 (Fill in the Blank)\\nTo improve the efficiency of symbol table operations, particularly the cost of string lookups and comparisons,  \\nthe Tiger compiler employs an optimization. It converts string identifiers into a unique, fixed-size data type. All  \\nsubsequent hash calculations and equality checks are performed on this new type, avoiding repeated,  \\ncharacter-by-character operations on the original strings. This optimized data type is referred to in the  \\npresentation as a ____.\\nAnswer:  ____\\nQuestion 5 (Multiple Choice)\\nWhen processing a language like Java that allows forward references, a member of one class can reference a  \\nmember of another class that is defined later in the source code. How is this typically handled by the symbol  \\ntable system to ensure all symbols are visible when needed?\\nA) A single, global symbol table is used, and all members from all classes are placed directly into it.\\nB) Each class (E, N, D) has its own symbol table, which are then combined (e.g., \u03c3 2 + \u03c3 4 + \u03c3 6) into a single,  \\ncomprehensive environment \u03c3 7 representing the entire package. This combined environment is then used for  \\ncompiling the classes within it.\\nC) The compiler processes declarations in strict sequential order, so when compiling D, it can only see symbols  \\nfrom E and N if they have already been fully analyzed.\\nD) A stack-based symbol table is used, pushing a class's table onto the stack when entering it and popping it off  \\nwhen exiting.\\n\u00a0\\n\u00a0// package M;\\nclass E { static int a = 5; }\\nclass N { static int b = 10; static int a = E.a + b; }\\nclass D { static int d = E.a + N.a; }1\\n2\\n3\\n4\\n\",\"annotations\":null}",
            "tool_call_id": "call_eWR92tyk9KdqmNkuURD1KBG0"
        },
        {
            "role": "assistant",
            "content": null,
            "tool_calls": [
                {
                    "id": "call_EZPgcb2N4c6Wb5FMYkcdPXZn",
                    "type": "function",
                    "function": {
                        "name": "filesystem-write_file",
                        "arguments": "{\"path\":\"/workspace/dumps/workspace/NOTE.md\",\"content\":\"# Notes: Semantic Analysis \u2013 Symbol Tables (from Compile.pptx)\\n\\n## 1) Definitions and insertion differences\\n\\n- Imperative symbol table (destructive update)\\n  - Definition: A single mutable environment that is updated in place (typically a hash table with external chaining). Scope management is done by logging operations and later undoing them, so the same table structure is reused across scopes.\\n  - Insertion behavior: Directly modifies the table. For a new binding x \u21a6 \u03c42 when x \u21a6 \u03c41 already exists, the new binding is pushed at the head of the bucket\u2019s chain. This shadows the older binding and enables O(1) scope pop by removing the head.\\n  - Scope pop: Restore by popping from an auxiliary undo stack or by using a per-bucket stack discipline; pointer/stack manipulations only\u2014no wholesale copying.\\n\\n- Functional symbol table (persistent/immutable)\\n  - Definition: Each update produces a new table value \u03c3\u2032 = \u03c3 + {x \u21a6 \u03c4} while the old \u03c3 remains available. Implemented efficiently with persistent balanced binary search trees (BSTs) by copying only the nodes along the root-to-insert path (O(log n) nodes).\\n  - Insertion behavior: Does not mutate the original table; returns a new table that shares most of its structure with the old one. With arrays (e.g., classic hash table backing), a functional update would require copying the whole array, which is inefficient; hence trees are preferred for persistent maps.\\n  - Scope pop: Trivial\u2014discard the newer table reference and keep using the older one (since it was never modified).\\n\\nDifference in insertion operations in one sentence:\\n- Imperative insertion mutates in place (push-at-head in the bucket chain to shadow previous bindings), while functional insertion returns a new table sharing structure (path-copying in a BST) and leaves the old table intact.\\n\\n---\\n\\n## 2) Original code from the slides with explanations\\n\\nBelow are the original code/text snippets as shown in the slides, grouped by topic, followed by concise explanations of their purpose and how they support different symbol-table modes.\\n\\n### 2.1 Tiger example for scopes and shadowing\\n\\n```\\n1 function f(a:int,b:int,c:int)=\\n2\\t(print_int (a+c);\\n3\\tlet var j:= a+b\\n4\\t\\t var a:= \u201chello\u201d\\n5\\t in print(a); print_int(j)\\n6\\tend;\\n7\\tprint_int(b)\\n8\\t)\\n```\\n\\nExplanation:\\n- Demonstrates environments \u03c30 \u2192 \u03c31 \u2192 \u03c32 \u2192 \u03c33 as declarations are encountered.\\n- Line 4 introduces a new a bound to string that shadows the outer a:int inside the let-in block; line 8 prints the inner a (type string) within that scope.\\n- At the end of the let (line 6), bindings in the inner scope are discarded, restoring the previous environment.\\n\\n---\\n\\n### 2.2 Imperative hash-table implementation (buckets, hash, constructor)\\n\\n```\\nstruct bucket { string key; void *binding; struct bucket *next; };\\n\\n#define SIZE 109\\n\\nstruct bucket *table[SIZE];\\n\\nunsigned int hash(char *s0)\\n{ unsigned int h=0; char *s;\\n  for(s=s0; *s; s++)\\n    h=h*65599 + *s; \\n  return h; \\n}\\n\\nstruct bucket *Bucket (string key, void *binding, struct bucket *next) {\\n  struct bucket *b=checked_malloc(sizeof(*b));\\n  b->key = key; b->binding = binding; b->next = next;\\n  return b; \\n}\\n```\\n\\nExplanation:\\n- Classic imperative symbol table using a fixed-size array of bucket heads with external chaining.\\n- hash uses a multiplicative rolling hash (65599) to distribute strings.\\n- Bucket allocates a node placed at the head of a bucket\u2019s linked list.\\n\\n---\\n\\n### 2.3 Imperative operations: insert, lookup, pop\\n\\n```\\nvoid insert(string key, void *binding) {\\n  int index=hash(key)%SIZE;\\n  table[index]=Bucket(key, binding, table[index]); \\n}\\n\\nvoid *lookup(string key) {\\n  int index=hash(key)%SIZE \\n  struct bucket *b;\\n  for (b = table[index]; b; b=b->next) \\n    if (0==strcmp(b->key,key)) \\n      return b->binding; \\n  return NULL; \\n}\\n\\nvoid pop(string key) { \\n  int index=hash(key)%SIZE\\n  table[index]=table[index].next; \\n}\\n```\\n\\nExplanation:\\n- insert: push-at-head to shadow old bindings for the same key; O(1) expected.\\n- lookup: search the bucket chain, returning the first (most recent) binding.\\n- pop: remove the head binding in a bucket\u2014used in scope restoration when combined with an auxiliary stack of pushed keys.\\n\\n---\\n\\n### 2.4 Effective imperative shadowing (textual illustration)\\n\\n```\\nConsider \u03c3 + {a \u21a6 \u03c42} when \u03c3 contains a \u21a6 \u03c41 already.\\n\\n The insert function leaves a \u21a6 \u03c41 in the bucket and puts a \u21a6 \u03c42 earlier in the list. \\nhash(a) -> <a, \u03c42 > -> <a, \u03c41>\\n\\nwhen pop(a) is done at the end of a's scope, \u03c3 is restored. (insertion and pop work in a stack-like fashion.)\\nhash(a) -> <a, \u03c41>\\n```\\n\\nExplanation:\\n- Shows how push-at-head insertion creates a shadow chain so that scope exit can simply pop the head to restore the previous binding.\\n\\n---\\n\\n### 2.5 Symbols and their interface (fast lookup keys)\\n\\n```\\ntypedef struct S_symbol_ *S_symbol;\\nS_symbol S_symbol (string);\\nstring S_name(S_symbol);\\n\\ntypedef struct TAB_table_ *S_table;\\nS_table S_empty( void);\\nvoid S_enter( S_table t,S_symbol sym, void *value); \\nvoid *S_look( S_table t, S_symbol sym);\\nvoid S_beginScope( S_table t); \\nvoid S_endScope( S_table t);\\n```\\n\\nExplanation:\\n- The compiler interns identifier strings into Symbols so comparisons and hashing operate on compact keys (pointers/integers) instead of character strings.\\n- S_table API wraps a generic hash table (TAB) and adds scope operations via begin/end scope.\\n\\n---\\n\\n### 2.6 Implementation of Symbols (interning)\\n\\n```\\nstatic S_symbol mksymbol (string name , S_symbol next) {\\n  S_symbol s = checked_malloc(sizeof(*s));\\n  s->name = name; s->next = next;\\n  return s;\\n}\\n\\nS_symbol S_symbol (string name) {\\n\\tint index = hash(name)%SIZE;\\n\\tS_symbol syms = hashtable[index], sym;\\n\\tfor ( sym = syms; sym; sym = sym->next)\\n\\t  if (0 == strcmp(sym->name, name)) return sym;\\n\\tsym = mksymbol(name,syms);\\n\\thashtable[index] = sym;\\n   return sym;\\n}\\n\\nstring S_name (S_symbol sym) {\\n  return sym->name;\\n}\\n```\\n\\nExplanation:\\n- Interning table: for any string name, return a unique S_symbol pointer (reusing an existing one if present). This enables O(1) pointer comparisons and fast hashing for identifiers.\\n\\n---\\n\\n### 2.7 Wrapping TAB with S_table operations\\n\\n```c\\n// make a new S_Table\\nS_table S_empty(void) {\\n  return TAB_empty(); \\n}\\n// insert a binding\\nvoid S_enter(S_table t, S_symbol sym, void *value){ \\n  TAB_enter(t,sym,value);\\n} \\n// look up a symbol\\nvoid *S_look(S_table t, S_symbol sym) { \\n  return TAB_look(t,sym); \\n}\\n```\\n\\nExplanation:\\n- S_table delegates to a generic hash-table module TAB for basic operations; this is the imperative (destructive) mode.\\n\\n---\\n\\n### 2.8 Scope management with begin/end scope markers\\n\\n```\\nFor destructive-update environments:\\nS_beginScope: Remembers the current state of the table\\nS_endScope: Restores the table to where it was at the most recent beginScope that has not already been ended.\\nstatic struct S_symbol_ marksym = { \u201c<mark>\u201d, 0 };\\n\\nvoid S_beginScope ( S_table t) { \\n  S_enter(t, &marksym, NULL); \\n}\\n\\nvoid S_endScope( S_table t) {\\n  S_symbol s;\\n  do \\n    s= TAB_pop(t); \\n  while (s != &marksym);\\n}\\n```\\n\\nExplanation:\\n- Uses a distinguished marker Symbol to delimit a scope on an auxiliary stack (inside TAB). endScope repeatedly pops until the marker is reached, effectively undoing all bindings added since beginScope.\\n\\n---\\n\\n### 2.9 Integrating the auxiliary stack into the Binder (TAB internals)\\n\\n```\\nThe auxiliary stack can be integrated into the Binder by having a global variable top showing the most recent Symbol bound in the table. \\nPushing: copy top into the prevtop field of the Binder.\\nstruct TAB_table_ {\\n  binder table[TABSIZE];\\n  void *top;\\n};\\n\\nt->table[index] = Binder(key, value,t->table[index], t->top);\\n\\nstatic binder Binder(void *key, void *value, binder next, void *prevtop) {\\n  binder b = checked_malloc(sizeof(*b));\\n  b->key = key; b->value=value; b->next=next; \\n  b->prevtop = prevtop;\\n  return b;\\n}\\n```\\n\\nExplanation:\\n- Shows one way TAB maintains a stack of inserted keys (top) woven through the binder nodes via prevtop pointers\u2014this supports efficient scope pop without searching buckets.\\n\\n---\\n\\n### 2.10 Functional (persistent) tables: why trees instead of hash arrays\\n\\nTextual illustrations from the slides:\\n\\n```\\nm2 = m1 + {mouse \u21a6 4}\\nm1 = {bat \u21a6 1,camel \u21a6 2,dog \u21a6 3}, suppose index(camel) = index(mouse) = 5\\nHash(mouse) -> <mouse, 4>: no longer have m1\\nCopy the array, but share all the old buckets: not efficient\\nThe array in a hash table should be quite large\\n```\\n\\n```\\nWe can perform such \u201cfunctional\u201d additions to search trees efficiently by using binary search trees.\\nIf we add a new node at depth d of the tree, we must create d new nodes \u2013 but we don\u2019t need to copy the whole tree.\\nCopy the nodes from the root to the parent of the inserted node.\\n\\nm1 keeps unchanged.\\n\\nLooking up an element: log(n) for a balanced tree of n nodes.\\n```\\n\\nExplanation:\\n- Functional hash tables would require copying a large array; persistent search trees avoid this by path-copying only O(log n) nodes and sharing the rest.\\n\\n---\\n\\n## 3) Homework (HW.pdf) \u2013 explanation and study guide\\n\\nThe assignment covers the practical implications of both imperative and functional symbol-table designs, scope handling, and Tiger\u2019s Symbol interning.\\n\\n- Question 1 (MC): Which implementation accomplishes cheap scope \u201crestore\u201d without copying the entire structure?\\n  - Explanation: Functional BSTs support restore by discarding the new reference; imperative hash tables with undo stacks support restore by pointer pops. Both achieve efficient restores without array copies.\\n  - Suggested answer: D) Both B and C are correct.\\n\\n- Question 2 (Fill-in): Type of a at print(a) on line 8 in the Tiger snippet with \u03c30 = {g \u21a6 string, a \u21a6 int}.\\n  - Explanation: Inside the let, line 6 binds a := \\\"hello\\\" (string), shadowing outer a:int. The print(a) within the let prints the inner a.\\n  - Suggested answer: string.\\n\\n- Question 3 (MC): Best way to insert a \u21a6 \u03c42 when a \u21a6 \u03c41 exists in an imperative hash table with chaining.\\n  - Explanation: Push-at-head insertion shadows the previous binding and makes scope pop O(1).\\n  - Suggested answer: C) Insert at the head of the chain.\\n\\n- Question 4 (Fill-in): Name of the optimized, unique identifier representation used by the Tiger compiler to avoid repeated string processing.\\n  - Explanation: The compiler interns strings as Symbols and reuses the unique S_symbol pointer for hashing and equality.\\n  - Suggested answer: symbol (or S_symbol).\\n\\n- Question 5 (MC): Handling Java-style forward references across multiple classes.\\n  - Explanation: Build per-class tables and combine them into a package-level environment (\u03c37) so each class sees the others during compilation.\\n  - Suggested answer: B) Combine class tables into \u03c37 and compile with that environment.\\n\\nTips: When studying, be able to explain (a) how shadowing is represented in a bucket chain, (b) how beginScope/endScope work with markers and TAB_pop, and (c) why persistent BSTs enable immutable updates while hash arrays do not.\\n\\n---\\n\\nEnd of notes.\\n\"}"
                    }
                }
            ]
        },
        {
            "role": "tool",
            "content": "{\"type\":\"text\",\"text\":\"Successfully wrote to /workspace/dumps/workspace/NOTE.md\",\"annotations\":null}",
            "tool_call_id": "call_EZPgcb2N4c6Wb5FMYkcdPXZn"
        },
        {
            "role": "assistant",
            "content": "I created NOTE.md with the requested summary, original code from the slides, explanations, and a walkthrough of the HW.pdf. File path: /workspace/dumps/workspace/NOTE.md\n\nHighlights covered in the note:\n- Clear definitions of functional vs. imperative symbol tables and how insertions differ.\n- All relevant code/text snippets from Compile.pptx organized by topic, with concise explanations of how each supports the different symbol-table modes (hash table with chaining, scope markers/undo stack, symbol interning, and persistent BSTs).\n- Explanation and suggested answers for the homework questions in HW.pdf, including reasoning.\n\nIf you want, I can also export a shorter cheat sheet or add diagrams of the scope chains and BST path-copying."
        }
    ]
}